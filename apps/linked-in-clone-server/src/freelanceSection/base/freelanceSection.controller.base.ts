/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FreelanceSectionService } from "../freelanceSection.service";
import { FreelanceSectionCreateInput } from "./FreelanceSectionCreateInput";
import { FreelanceSection } from "./FreelanceSection";
import { Post } from "../../post/base/Post";
import { FreelanceSectionFindManyArgs } from "./FreelanceSectionFindManyArgs";
import { FreelanceSectionWhereUniqueInput } from "./FreelanceSectionWhereUniqueInput";
import { FreelanceSectionUpdateInput } from "./FreelanceSectionUpdateInput";

export class FreelanceSectionControllerBase {
  constructor(protected readonly service: FreelanceSectionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FreelanceSection })
  async createFreelanceSection(
    @common.Body() data: FreelanceSectionCreateInput
  ): Promise<FreelanceSection> {
    return await this.service.createFreelanceSection({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FreelanceSection] })
  @ApiNestedQuery(FreelanceSectionFindManyArgs)
  async freelanceSections(
    @common.Req() request: Request
  ): Promise<FreelanceSection[]> {
    const args = plainToClass(FreelanceSectionFindManyArgs, request.query);
    return this.service.freelanceSections({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FreelanceSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async freelanceSection(
    @common.Param() params: FreelanceSectionWhereUniqueInput
  ): Promise<FreelanceSection | null> {
    const result = await this.service.freelanceSection({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FreelanceSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFreelanceSection(
    @common.Param() params: FreelanceSectionWhereUniqueInput,
    @common.Body() data: FreelanceSectionUpdateInput
  ): Promise<FreelanceSection | null> {
    try {
      return await this.service.updateFreelanceSection({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FreelanceSection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFreelanceSection(
    @common.Param() params: FreelanceSectionWhereUniqueInput
  ): Promise<FreelanceSection | null> {
    try {
      return await this.service.deleteFreelanceSection({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
