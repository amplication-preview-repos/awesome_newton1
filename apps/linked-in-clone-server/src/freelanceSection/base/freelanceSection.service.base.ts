/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FreelanceSection as PrismaFreelanceSection,
} from "@prisma/client";

export class FreelanceSectionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FreelanceSectionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.freelanceSection.count(args);
  }

  async freelanceSections(
    args: Prisma.FreelanceSectionFindManyArgs
  ): Promise<PrismaFreelanceSection[]> {
    return this.prisma.freelanceSection.findMany(args);
  }
  async freelanceSection(
    args: Prisma.FreelanceSectionFindUniqueArgs
  ): Promise<PrismaFreelanceSection | null> {
    return this.prisma.freelanceSection.findUnique(args);
  }
  async createFreelanceSection(
    args: Prisma.FreelanceSectionCreateArgs
  ): Promise<PrismaFreelanceSection> {
    return this.prisma.freelanceSection.create(args);
  }
  async updateFreelanceSection(
    args: Prisma.FreelanceSectionUpdateArgs
  ): Promise<PrismaFreelanceSection> {
    return this.prisma.freelanceSection.update(args);
  }
  async deleteFreelanceSection(
    args: Prisma.FreelanceSectionDeleteArgs
  ): Promise<PrismaFreelanceSection> {
    return this.prisma.freelanceSection.delete(args);
  }
}
